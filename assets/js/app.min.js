/**
 * Sejong Anesthesiology Calculator
 * 개선된 버전 - 2025.09.14
 * 접근성, 오류 처리, 코드 구조 개선
 */

(function() {
  'use strict';

  // 애플리케이션 상태 관리
  const AppState = {
    patient: {
      gender: '',
      ageType: '',
      ageValue: null,
      ageYears: null,
      height: null,
      weight: null
    },
    
    reset() {
      this.patient = {
        gender: '',
        ageType: '',
        ageValue: null,
        ageYears: null,
        height: null,
        weight: null
      };
    }
  };

  // 연령 구분별 설정
  const AGE_CONFIG = {
    adult: {
      unit: 'Years',
      placeholder: '나이(년)',
      labelOut: 'Adult',
      factor: 1,
      suffix: 'y',
      maxAge: 150,
      helpText: '1-150년 범위로 입력'
    },
    infant: {
      unit: 'Months',
      placeholder: '나이(개월)',
      labelOut: 'Infant',
      factor: 1/12,
      suffix: 'm',
      maxAge: 120,
      helpText: '1-120개월 범위로 입력'
    },
    neonate: {
      unit: 'Days',
      placeholder: '나이(일)',
      labelOut: 'NEONATE',
      factor: 1/365,
      suffix: 'd',
      maxAge: 365,
      helpText: '1-365일 범위로 입력'
    }
  };

  // DOM 요소 참조
  const Elements = {
    form: null,
    ageValueInput: null,
    ageUnitSpan: null,
    ageHelpDiv: null,
    heightInput: null,
    weightInput: null,
    patientSexAgeDiv: null,
    patientBodyDiv: null,
    patientBSADiv: null,
    errorMessageDiv: null,
    bodyErrorMessageDiv: null,
    calculationIndicator: null,
    resetBtn: null,
    
    init() {
      this.form = document.getElementById('myForm');
      this.ageValueInput = document.getElementById('ageValue');
      this.ageUnitSpan = document.getElementById('ageUnit');
      this.ageHelpDiv = document.getElementById('ageHelp');
      this.heightInput = document.getElementById('height');
      this.weightInput = document.getElementById('bwt');
      this.patientSexAgeDiv = document.getElementById('patientSexAge');
      this.patientBodyDiv = document.getElementById('patientBody');
      this.patientBSADiv = document.getElementById('patientBSA');
      this.errorMessageDiv = document.getElementById('errorMessage');
      this.bodyErrorMessageDiv = document.getElementById('bodyErrorMessage');
      this.calculationIndicator = document.getElementById('bsaCalculating');
      this.resetBtn = document.getElementById('resetBtn');
    }
  };

  // 유틸리티 함수
  const Utils = {
    parseIntStrict(str) {
      const n = Number(str);
      return Number.isInteger(n) && n > 0 ? n : NaN;
    },

    roundToOne(num) {
      return Math.round(num * 10) / 10;
    },

    formatOne(num) {
      return Number.isInteger(num) ? String(num) : num.toFixed(1);
    },

    getSexShort(gender) {
      return gender === 'Male' ? 'M' : gender === 'Female' ? 'F' : '';
    },

    showError(element, message) {
      if (element) {
        element.textContent = message;
        element.classList.add('show');
        element.setAttribute('aria-live', 'assertive');
      }
    },

    hideError(element) {
      if (element) {
        element.textContent = '';
        element.classList.remove('show');
        element.setAttribute('aria-live', 'polite');
      }
    },

    showCalculationIndicator(message) {
      if (Elements.calculationIndicator) {
        Elements.calculationIndicator.textContent = message;
      }
    },

    hideCalculationIndicator() {
      if (Elements.calculationIndicator) {
        Elements.calculationIndicator.textContent = '';
      }
    }
  };

  // 입력 검증
  const Validator = {
    validateAge(ageType, ageValue) {
      if (!ageType) {
        return { valid: false, message: '연령 구분을 선택해주세요' };
      }

      const parsedAge = Utils.parseIntStrict(ageValue);
      if (isNaN(parsedAge)) {
        return { valid: false, message: '나이를 정확히 입력해주세요 (양의 정수만 가능)' };
      }

      const config = AGE_CONFIG[ageType];
      if (parsedAge > config.maxAge) {
        return { 
          valid: false, 
          message: `${config.unit}는 1-${config.maxAge} 범위로 입력해주세요` 
        };
      }

      return { valid: true, value: parsedAge };
    },

    validateHeightWeight(heightStr, weightStr) {
      const height = parseFloat(heightStr);
      const weight = parseFloat(weightStr);

      if (!heightStr || !weightStr) {
        return { valid: false, message: '키와 체중을 모두 입력해주세요' };
      }

      if (!isFinite(height) || !isFinite(weight)) {
        return { valid: false, message: '키와 체중을 올바른 숫자로 입력해주세요' };
      }

      if (height < 10 || height > 300) {
        return { valid: false, message: '키는 10-300cm 범위로 입력해주세요' };
      }

      if (weight < 0.5 || weight > 500) {
        return { valid: false, message: '체중은 0.5-500kg 범위로 입력해주세요' };
      }

      const roundedHeight = Utils.roundToOne(height);
      const roundedWeight = Utils.roundToOne(weight);

      return {
        valid: true,
        height: roundedHeight,
        weight: roundedWeight,
        text: `${Utils.formatOne(roundedHeight)}cm / ${Utils.formatOne(roundedWeight)}kg`
      };
    }
  };

  // 칩 버튼 관리
  const ChipManager = {
    setChips(groupEl, value) {
      const chips = groupEl.querySelectorAll('.chip');
      chips.forEach((chip, index) => {
        const isSelected = chip.dataset.value === value;
        chip.setAttribute('aria-checked', isSelected);
        chip.classList.toggle('active', isSelected);
        chip.tabIndex = isSelected ? 0 : -1;
      });
    },

    setupKeyboardNavigation() {
      document.addEventListener('keydown', (e) => {
        if (e.target.classList.contains('chip')) {
          const group = e.target.closest('.chips');
          const chips = Array.from(group.querySelectorAll('.chip'));
          const currentIndex = chips.indexOf(e.target);

          switch (e.key) {
            case 'ArrowRight':
            case 'ArrowDown':
              e.preventDefault();
              const nextIndex = (currentIndex + 1) % chips.length;
              chips[nextIndex].focus();
              break;
            case 'ArrowLeft':
            case 'ArrowUp':
              e.preventDefault();
              const prevIndex = (currentIndex - 1 + chips.length) % chips.length;
              chips[prevIndex].focus();
              break;
            case ' ':
            case 'Enter':
              e.preventDefault();
              e.target.click();
              break;
          }
        }
      });
    }
  };

  // BSA 계산
  const BSACalculator = {
    getSelectedMethod() {
      const el = document.querySelector('input[name="bsaMethod"]:checked');
      return el ? el.value : 'mostellar';
    },

    computeBSA(height, weight, method) {
      if (!isFinite(height) || !isFinite(weight) || height <= 0 || weight <= 0) {
        return null;
      }

      switch (method) {
        case 'mostellar':
          return Math.sqrt(height * weight / 3600);
        case 'dubois':
          return 0.007184 * Math.pow(height, 0.725) * Math.pow(weight, 0.425);
        case 'haycock':
          return 0.024265 * Math.pow(height, 0.3964) * Math.pow(weight, 0.5378);
        default:
          return null;
      }
    },

    formatBSA(value) {
      if (!value || !isFinite(value)) {
        return 'BSA = --/m²';
      }
      return `BSA = ${(Math.round(value * 100) / 100).toFixed(2)}/m²`;
    },

    updateBSA() {
      const height = parseFloat(Elements.heightInput.value);
      const weight = parseFloat(Elements.weightInput.value);
      const method = this.getSelectedMethod();

      if (!isFinite(height) || !isFinite(weight) || height < 0.1 || weight < 0.1) {
        Elements.patientBSADiv.textContent = 'BSA = --/m²';
        Utils.hideCalculationIndicator();
        return;
      }

      Utils.showCalculationIndicator('계산 중...');
      
      // 비동기적으로 계산하여 UI 반응성 개선
      setTimeout(() => {
        const roundedHeight = Utils.roundToOne(height);
        const roundedWeight = Utils.roundToOne(weight);
        const bsaValue = this.computeBSA(roundedHeight, roundedWeight, method);
        
        Elements.patientBSADiv.textContent = this.formatBSA(bsaValue);
        Utils.hideCalculationIndicator();
      }, 100);
    }
  };

  // UI 업데이트 관리
  const UIUpdater = {
    updateAgeUI() {
      const config = AGE_CONFIG[AppState.patient.ageType] || {};
      Elements.ageUnitSpan.textContent = config.unit || '';
      Elements.ageValueInput.placeholder = config.placeholder || '숫자 입력';
      Elements.ageValueInput.max = config.maxAge || 150;
      
      if (Elements.ageHelpDiv) {
        Elements.ageHelpDiv.textContent = config.helpText || '연령 구분을 먼저 선택해주세요';
      }
    },

    displayPatientAge() {
      const { gender, ageType, ageValue } = AppState.patient;
      const config = AGE_CONFIG[ageType];
      const sex = Utils.getSexShort(gender);
      
      let display = '';
      if (ageType === 'adult') {
        display = `${config.labelOut} / ${sex} / ${AppState.patient.ageYears}y`;
      } else if (ageType === 'infant') {
        display = `${config.labelOut} / ${sex} / ${ageValue}m`;
      } else if (ageType === 'neonate') {
        display = `${config.labelOut} / ${sex} / ${ageValue}d`;
      }
      
      Elements.patientSexAgeDiv.textContent = display;
    },

    clearAll() {
      Elements.patientSexAgeDiv.textContent = '';
      Elements.patientBodyDiv.textContent = '';
      Elements.patientBSADiv.textContent = 'BSA = --/m²';
      Utils.hideError(Elements.errorMessageDiv);
      Utils.hideError(Elements.bodyErrorMessageDiv);
      Utils.hideCalculationIndicator();
    }
  };

  // 폼 리셋 기능
  const FormReset = {
    resetForm() {
      // 상태 초기화
      AppState.reset();
      
      // 입력 필드 초기화
      Elements.ageValueInput.value = '';
      Elements.heightInput.value = '';
      Elements.weightInput.value = '';
      
      // 모든 칩 버튼 초기화
      document.querySelectorAll('.chips').forEach(group => {
        ChipManager.setChips(group, '');
      });
      
      // BSA 방법 초기화 (Mostellar로 기본 설정)
      const mostellarRadio = document.querySelector('input[name="bsaMethod"][value="mostellar"]');
      if (mostellarRadio) {
        mostellarRadio.checked = true;
      }
      
      // UI 초기화
      UIUpdater.clearAll();
      UIUpdater.updateAgeUI();
      
      // 첫 번째 칩에 포커스 설정
      const firstChip = document.querySelector('.chip');
      if (firstChip) {
        firstChip.tabIndex = 0;
      }
      
      console.log('폼이 초기화되었습니다.');
    }
  };

  // 이벤트 핸들러
  const EventHandlers = {
    handleChipClick(e) {
      const btn = e.target.closest('.chip');
      if (!btn) return;

      const group = btn.closest('.chips');
      const key = group ? group.getAttribute('data-target') : '';
      if (!key) return;

      AppState.patient[key] = btn.dataset.value;
      ChipManager.setChips(group, AppState.patient[key]);

      if (key === 'ageType') {
        UIUpdater.updateAgeUI();
        // 연령 입력 필드 초기화
        Elements.ageValueInput.value = '';
        AppState.patient.ageValue = null;
        AppState.patient.ageYears = null;
      }

      Utils.hideError(Elements.errorMessageDiv);
    },

    handleFormSubmit(e) {
      e.preventDefault();
      
      const { gender, ageType } = AppState.patient;
      const ageRawStr = (Elements.ageValueInput.value || '').trim();

      // 기본 필드 검증
      if (!gender || !ageType || ageRawStr === '') {
        Utils.showError(Elements.errorMessageDiv, '성별, 연령구분, 나이를 모두 입력해주세요');
        return;
      }

      // 연령 검증
      const ageValidation = Validator.validateAge(ageType, ageRawStr);
      if (!ageValidation.valid) {
        Utils.showError(Elements.errorMessageDiv, ageValidation.message);
        return;
      }

      // 상태 업데이트
      AppState.patient.ageValue = ageValidation.value;
      AppState.patient.ageYears = ageValidation.value * AGE_CONFIG[ageType].factor;

      // UI 업데이트
      Utils.hideError(Elements.errorMessageDiv);
      UIUpdater.displayPatientAge();
      
      console.log('환자 기본 정보가 입력되었습니다:', AppState.patient);
    },

    handleBodyInfoApply() {
      const heightStr = Elements.heightInput.value.trim();
      const weightStr = Elements.weightInput.value.trim();

      const validation = Validator.validateHeightWeight(heightStr, weightStr);
      
      if (!validation.valid) {
        Utils.showError(Elements.bodyErrorMessageDiv, validation.message);
        Elements.patientBodyDiv.textContent = '';
        return;
      }

      // 상태 업데이트
      AppState.patient.height = validation.height;
      AppState.patient.weight = validation.weight;

      // UI 업데이트
      Utils.hideError(Elements.bodyErrorMessageDiv);
      Elements.patientBodyDiv.textContent = validation.text;
      
      // BSA 자동 계산
      BSACalculator.updateBSA();
      
      console.log('환자 신체 정보가 입력되었습니다:', {
        height: validation.height,
        weight: validation.weight
      });
    },

    handleBSAMethodChange() {
      BSACalculator.updateBSA();
    },

    handleReset() {
      if (confirm('모든 입력 정보를 초기화하시겠습니까?')) {
        FormReset.resetForm();
      }
    }
  };

  // 애플리케이션 초기화
  const App = {
    init() {
      console.log('Sejong Anesthesiology Calculator 초기화 중...');
      
      // DOM 요소 초기화
      Elements.init();
      
      // 키보드 내비게이션 설정
      ChipManager.setupKeyboardNavigation();
      
      // 이벤트 리스너 등록
      this.setupEventListeners();
      
      // 초기 UI 상태 설정
      UIUpdater.updateAgeUI();
      BSACalculator.updateBSA();
      
      // 첫 번째 칩에 포커스 가능하도록 설정
      const firstChip = document.querySelector('.chip');
      if (firstChip) {
        firstChip.tabIndex = 0;
      }
      
      console.log('애플리케이션 초기화 완료');
    },

    setupEventListeners() {
      // 칩 클릭 이벤트
      document.addEventListener('click', EventHandlers.handleChipClick);
      
      // 폼 제출 이벤트
      if (Elements.form) {
        Elements.form.addEventListener('submit', EventHandlers.handleFormSubmit);
      }
      
      // 신체 정보 적용 버튼
      const applyBodyBtn = document.getElementById('applyBtnBody');
      if (applyBodyBtn) {
        applyBodyBtn.addEventListener('click', EventHandlers.handleBodyInfoApply);
      }
      
      // BSA 방법 변경 이벤트
      const bsaMethodGroup = document.getElementById('bsaMethodGroup');
      if (bsaMethodGroup) {
        bsaMethodGroup.addEventListener('change', EventHandlers.handleBSAMethodChange);
      }
      
      // 리셋 버튼
      if (Elements.resetBtn) {
        Elements.resetBtn.addEventListener('click', EventHandlers.handleReset);
      }
      
      // 입력 필드 실시간 검증
      Elements.heightInput.addEventListener('input', () => {
        Utils.hideError(Elements.bodyErrorMessageDiv);
      });
      
      Elements.weightInput.addEventListener('input', () => {
        Utils.hideError(Elements.bodyErrorMessageDiv);
      });
      
      Elements.ageValueInput.addEventListener('input', () => {
        Utils.hideError(Elements.errorMessageDiv);
      });
    }
  };

  // 개발용 테스트 함수
  const DevTests = {
    runTests() {
      const testResults = document.getElementById('test-results');
      if (!testResults) return;
      
      const tests = [
        {
          name: 'BSA Mostellar 계산 테스트',
          test: () => {
            const result = BSACalculator.computeBSA(170, 70, 'mostellar');
            return Math.abs(result - 1.87) < 0.1;
          }
        },
        {
          name: '연령 검증 테스트',
          test: () => {
            const result = Validator.validateAge('adult', '30');
            return result.valid && result.value === 30;
          }
        },
        {
          name: '신체 정보 검증 테스트',
          test: () => {
            const result = Validator.validateHeightWeight('170.5', '70.3');
            return result.valid && result.height === 170.5 && result.weight === 70.3;
          }
        }
      ];
      
      testResults.innerHTML = '';
      tests.forEach(test => {
        const li = document.createElement('li');
        const passed = test.test();
        li.textContent = `${test.name}: ${passed ? '통과' : '실패'}`;
        li.style.color = passed ? 'green' : 'red';
        testResults.appendChild(li);
      });
    }
  };

  // DOM 로드 완료 시 애플리케이션 시작
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      App.init();
      DevTests.runTests();
    });
  } else {
    App.init();
    DevTests.runTests();
  }

})();